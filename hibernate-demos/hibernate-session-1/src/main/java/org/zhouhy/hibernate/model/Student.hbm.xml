<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 2019-8-7 7:08:44 by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="org.zhouhy.hibernate.model.Student" table="STUDENT">
        <id name="id" type="int">
            <column name="ID" />
            <!-- 数据库底层来实现id的增长 -->
            <generator class="native" />
        </id>
        <property name="name" type="java.lang.String">
            <column name="NAME" />
        </property>
        <property name="sex" type="java.lang.String">
            <column name="SEX" />
        </property>
        <property name="regDate" type="java.util.Date">
            <column name="REGDATE" />
        </property>
    </class>
</hibernate-mapping>
<!-- 
	1、assigned
		主键由外部程序负责生成，在 save() 之前必须指定一个。
		Hibernate不负责维护主键生成。与Hibernate和底层数据库都无关，可以跨数据库。
		在存储对象前，必须要使用主键的setter方法给主键赋值，至于这个值怎么生成，完全由自己决定，这种方法应该尽量避免。
		由于有些数据库没有自增长机制例如oracle，那么这个时候可能就需要这种方法来生成组件
	
	2、increment
		由Hibernate从数据库中取出主键的最大值（每个session只取1次），以该值为基础，
		每次增量为1，在内存中生成主键，不依赖于底层的数据库，因此可以跨数据库。	
		特点：跨数据库，不适合多进程并发更新数据库，适合单一进程访问数据库，不能用于群集环境。
	
	3、hilo
		hilo（高低位方式high low）是hibernate中最常用的一种生成方式，
		需要一张额外的表保存hi的值。保存hi值的表至少有一条记录（只与第一条记录有关），
		否则会出现错误。可以跨数据库。
		<id name="id" column="id">
			<generator class="hilo">
				<param name="table">hibernate_hilo</param>指定保存hi值的表名
				<param name="column">next_hi</param> 指定保存hi值的列名 
				<param name="max_lo">100</param>指定低位的最大值
			</generator>
		</id>
		
	4、seqhilo
		与hilo类似，通过hi/lo算法实现的主键生成机制，
		只是将hilo中的数据表换成了序列sequence，需要数据库中先创建sequence，
		适用于支持sequence的数据库，如Oracle。
		
	5、sequence
		采用数据库提供的sequence机制生成主键，需要数据库支持sequence。
		如oralce、DB、SAP DB、PostgerSQL、McKoi中的sequence。
		MySQL这种不支持sequence的数据库则不行（可以使用identity）。
	
	6、identity
		identity由底层数据库生成标识符。
		identity是由数据库自己生成的，但这个主键必须设置为自增长，
		使用identity的前提条件是底层数据库支持自动增长字段类型，
		如DB2、SQL Server、MySQL、Sybase和HypersonicSQL等，
		Oracle这类没有自增字段的则不支持。
		
	7、native
		native由hibernate根据使用的数据库自行判断采用identity、hilo、sequence
		其中一种作为主键生成方式，灵活性很强。
		如果能支持identity则使用identity，如果支持sequence则使用sequence。
		特点：根据数据库自动选择，项目中如果用到多个数据库时，可以使用这种方式，使用时需要设置表的自增字段或建立序列，建立表等。
	
	8、uuid
		Hibernate在保存对象时，生成一个UUID字符串作为主键，保证了唯一性，
		但其并无任何业务逻辑意义，只能作为主键，唯一缺点长度较大，32位
		（Hibernate将UUID中间的“-”删除了）的字符串，占用存储空间大，
		但是有两个很重要的优点，Hibernate在维护主键时，不用去数据库查询，从而提高效率，
		而且它是跨数据库的，以后切换数据库极其方便。
		特点：uuid长度大，占用空间大，跨数据库，不用访问数据库就生成主键值，所以效率高且能保证唯一性，移植非常方便，推荐使用。
	
	9、guid
		Hibernate在维护主键时，先查询数据库，获得一个uuid字符串，
		该字符串就是主键值，该值唯一，缺点长度较大，支持数据库有限，
		优点同uuid，跨数据库，但是仍然需要访问数据库。
		特点：需要数据库支持查询uuid，生成时需要查询数据库，效率没有uuid高，推荐使用uuid。
		
	10、foreign
		使用另外一个相关联的对象的主键作为该对象主键。主要用于一对一关系中。
		特点：很少使用，大多用在一对一关系中。

	11、select
		使用触发器生成主键，主要用于早期的数据库主键生成机制，能用到的地方非常少。	
	
 -->
